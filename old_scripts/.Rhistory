filter(meanabsLRP>=cutoff) %>%
mutate(rel = molecular_names %in% sel_genes) %>%
mutate(DRUG = factor(DRUG, levels = order_by_moa$DRUG))
most_important_only_red <- most_important %>%
filter(molecular_names %in% sel_genes)
most_important_without_red <- most_important %>%
filter(!(molecular_names %in% sel_genes))
most_important_genes_plot_rank <- ggplot(most_important, aes(x = DRUG, y = scaled_LRP, label = molecular_names)) +
#geom_line(data = line_data, aes(x = DRUG, y= x, color=moa), linewidth=1) +
geom_line(data = line_data, aes(x = DRUG, y= x, color=moa), linewidth=2, arrow = arrow(length=unit(1,"cm"), type = 'closed')) +
geom_text_repel(data = most_important_without_red, show.legend=F, size=6, color='black', max.overlaps=1000) +
geom_label_repel(data = most_important_only_red, show.legend=F, size=6, color='red', max.overlaps = 1000) +
geom_point(data=most_important_without_red, aes(x = DRUG, y = scaled_LRP),color='black', size=4.0) +
geom_point(data=most_important_only_red, aes(x = DRUG, y = scaled_LRP),color='red') +
theme_minimal() +
scale_y_continuous(trans='log10') +
theme(axis.text = element_text(size=20),
axis.title.y = element_blank(),
axis.title.x = element_text(size=30),
legend.title = element_blank(),
legend.text = element_text(size=20),
legend.position = 'bottom') +
ylab('xAI-assigned Importance') +
coord_flip() +
scale_x_discrete(limits=rev)
most_important_genes_plot_rank
png('./figures/important_genes.png', width=3000, height=1500, res=200)
relevantometer
dev.off()
png('./figures/important_genes_scaled.png', width=3200, height=4000, res=150)
most_important_genes_plot_rank
dev.off()
##########################
#groups_of_important genes across drugs
#########################
group_importance <- most_important10 %>%
left_join(MOA) %>%
#filter((moa == 'EGFR inhibitor') | (DRUG == 'IBRUTINIB')) %>%
filter(moa == 'MEK inhibitor') %>%
group_by(molecular_names) %>%
dplyr::summarize(N=n())
#############################
##################################################################################
###############
#save important genes for reactome
##############
reactome_genes <- most_important$molecular_names %>% unique()
write.csv(reactome_genes,'figures/reactome_genes.csv', row.names=F)
write.csv(most_important10$molecular_names %>% unique(),'figures/reactome_genes10.csv', row.names=F)
######
#make networks
#####
all_network_genes <- read.csv('../data/string_interactions_short.tsv',sep='\t')[,c(1,2)]
colnames(all_network_genes) <- c('V1', 'V3')
vertices_not_in_graph <- most_important10$molecular_names[!(most_important10$molecular_names %in% all_network_genes$V1) &
!(most_important10$molecular_names %in% all_network_genes$V3)] %>% unique()
most_important10 <- most_important10 %>% dplyr::select(molecular_names, meanabsLRP, DRUG, slope) %>%
group_by(DRUG) %>%
mutate(node_size = meanabsLRP/max(meanabsLRP), node_color = ifelse(slope<0, 'blue', 'red'))
g <- graph_from_data_frame(all_network_genes, directed=F)
g <- g + vertices(vertices_not_in_graph)
V(g)$name
V(g)$vertexsize <- 5
V(g)$vertexcolor = 'gray60'
E(g)$weight <- 0.01
#l <- layout_with_lgl(g)
set.seed(1)
l <- layout_nicely(g)
#l <- layout_with_fr(g)
#l <- layout_with_lgl(g)
png('./figures/networks_reactome.png', width = 3000, height=3500, res=150)
par(mfrow=c(4,3), mar=c(0,0,2,0))
for (current_drug in order_by_moa$DRUG){
current_g <- g
current_data <- most_important10 %>% filter(DRUG == current_drug)
current_genes <- current_data$molecular_names
print(length(current_genes))
node.size<-setNames(current_data$node_size, current_data$molecular_names)
node.color<-setNames(current_data$node_color, current_data$molecular_names)
for (k in names(node.size)) {
if (k %in% V(current_g)$name) {
print(V(current_g)[k]$name)
V(current_g)[k]$vertexsize <- node.size[k]**2*20
V(current_g)[k]$vertexcolor <- node.color[k]}
}
print(V(current_g)$vertexsize)
#current_network_genes <- all_network_genes %>%
#mutate(important = ifelse((V1 %in% current_genes)| (V3 %in% current_genes), 1,0))
V(current_g)$color = ifelse(V(current_g)$name %in% current_genes, 'red', 'gray60')
V(current_g)$vertexcolor[!((degree(current_g)>0) | (V(current_g)$name %in% current_genes))] <- NA
plot(current_g, vertex.size=V(current_g)$vertexsize, #ifelse(V(current_g)$name %in% current_genes,as.matrix(10), 5),
layout=l, vertex.label.cex=2.0, vertex.label.color = 'black', edge.width=0.4, edge.color = 'black',
vertex.color = adjustcolor(V(current_g)$vertexcolor,0.4), vertex.frame.color = NA,
vertex.label = ifelse(V(current_g)$name %in% current_genes, V(g)$name, NA))#,
#vertex.label = V(current_g)$name,
#main = current_drug, main.size=15)
title(current_drug, cex.main = 2.5)
}
dev.off()
######
#make networks individually
#####
all_network_genes <- read.csv('../data/10genes.sif', sep='\t', header=F)[,c(1,3)] #%>%
##########################
#plot drug resistance in several cell  types against Vincristine and Vinclastine
##########################
ABCB1_resistance <- dat %>% filter((molecular_names == 'ABCB1'), grepl('VIN', DRUG)) %>%
left_join(cell_line_names)
ggplot(ABCB1_resistance, aes(x = expression, y = LRP, color = ORGAN)) +
geom_point(size=1) +
#geom_smooth(se=F, linewidth=0.2, span=0.9) +
geom_text_repel(aes(x = expression, y = LRP, label=ORGAN)) +
#geom_text_repel(data = ABCB1_labels, aes(x = expression, y = smooth, label=ORGAN)) +
theme_classic() +
facet_grid(DRUG~molecular_names, scales='free') +
theme_minimal()
png('./figures/VincristineVinblastine_EffectperOrgan.png', width=2000, height=1200, res=150)
ggplot(ABCB1_resistance %>% filter(!is.na(ORGAN)), aes(y = ORGAN, x = LRP, fill = DRUG)) + geom_boxplot() +
theme_minimal() +
theme(
legend.title = element_blank(),
axis.title.y = element_blank(),
axis.text= element_text(size=13),
axis.title = element_text(size=15),
legend.text = element_text(size=13)
) +
xlab('LRP score')
dev.off()
library(magrittr)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(Hmisc)
library(cowplot)
library(pROC)
library(stringr)
library(RColorBrewer)
library(netresponse)
library(igraph)
#genes that are relevant across drugs? sensitivity genes? essentiality?
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#read training dat
read_dat <- function() {
#files <- list.files(paste0('../results_without_compound_embedding/training/'))
files <- list.files(paste0('../results/training/'))
print(files)
#d <- rbindlist(lapply(files, function(f) fread(paste0('../results_without_compound_embedding/training/', f))))
d <- rbindlist(lapply(files, function(f) fread(paste0('../results/training/', f))))
d
}
meth <- 'spearman'
nn_dat <- read_dat() %>%
group_by(drugs, cells, fold, epoch) %>%
dplyr::summarize(ground_truth = mean(ground_truth), prediction = mean(prediction))%>%
dplyr::filter(epoch ==50) %>%
select(-epoch) %>%
mutate('type' = 'nn')
cor_random <- nn_dat %>% group_by(fold, drugs) %>%
dplyr::summarize(nn_r = cor(ground_truth, prediction, method = meth), ncells = n()) %>%
filter(ncells>=10)
cor_random_average_over_fold <- cor_random %>%
group_by(drugs) %>%
dplyr::summarize(meanr = mean(nn_r), minv = min(nn_r), maxv = max(nn_r)) %>%
ungroup() %>%
filter(meanr>0.2) %>%
dplyr::select(DRUG = drugs, meanr)
cancervsnoncancer <- read.csv('../data/biomarkers.csv') %>%
select(DRUG=name, drug_category) %>%
mutate(DRUG = toupper(DRUG)) %>% unique()
read_dat_LRP <- function() {
files <- list.files(paste0('../results/LRP_specific_genes/'))
print(files)
d <- rbindlist(lapply(files, function(f) fread(paste0('../results/LRP_specific_genes/', f))[,-1] %>% unique()))
#d <- rbindlist(lapply(files, function(f) fread(paste0('../results/LRP/', f))[,-1] ))
d
}
dat_LRP <- read_dat_LRP() %>%
left_join(cor_random_average_over_fold) %>%
filter(meanr>0.2) %>%
left_join(cancervsnoncancer)
names <- dat_LRP %>%
group_by(DRUG) %>%
filter(expression == max(expression))
ggplot(dat_LRP, aes(x = expression, y = LRP, group = DRUG, color = drug_category)) +
#geom_point(size=2.0, alpha=0.5) +
geom_smooth(se=F, linewidth=0.2) +
geom_text_repel(data = names, aes(x = expression, y = LRP, label = DRUG)) +
theme_minimal()
get_slope <- function(x,y) {
coef(lm(y~x))[2]
}
get_slope(dat_LRP$expression, dat_LRP$LRP)
summarized <- dat_LRP %>%
group_by(DRUG, drug_category) %>%
dplyr::summarize(corr = get_slope(expression, LRP), N=n()) %>%
filter(!is.na(corr), !is.na(drug_category))
png('./figures/compare_ABCB1_among_drugs.png', width=1500, height=1000, res=150)
ggplot(summarized, aes (x = drug_category, y =corr, label = DRUG)) +
geom_boxplot() +
geom_jitter(position = position_jitter(seed = 1)) +
geom_text_repel(position = position_jitter(seed = 1), size=3) +
theme_classic() +
theme(axis.title.x = element_blank()) +
ylab('Slope')
dev.off()
res_formanuscript <- summarized %>% group_by(drug_category) %>%
dplyr::summarize(medianv = median(corr), iqr = IQR(corr))
wilcox.test(summarized %>% filter(drug_category == 'chemo') %>% .$corr, summarized %>% filter(drug_category == 'noncancer') %>% .$corr)
wilcox.test(summarized %>% filter(drug_category == 'chemo') %>% .$corr, summarized %>% filter(drug_category == 'targeted cancer') %>% .$corr)
wilcox.test(summarized %>% filter(drug_category == 'chemo') %>% .$corr, summarized %>% filter(drug_category == 'noncancer') %>% .$corr)
View(summarized)
View(res_formanuscript)
wilcox.test(summarized %>% filter(drug_category == 'chemo') %>% .$corr, summarized %>% filter(drug_category == 'noncancer') %>% .$corr)
wilcox.test(summarized %>% filter(drug_category == 'chemo') %>% .$corr, summarized %>% filter(drug_category == 'targeted cancer') %>% .$corr)
library(magrittr)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(Hmisc)
library(cowplot)
library(pROC)
library(stringr)
library(RColorBrewer)
library(netresponse)
library(igraph)
library(ComplexHeatmap)
#genes that are relevant across drugs? sensitivity genes? essentiality?
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
read_dat <- function() {
files <- list.files(paste0('../results/LRP/'))
print(files)
d <- rbindlist(lapply(files, function(f) fread(paste0('../results/LRP/', f))[,-1] %>% unique()))
#d <- rbindlist(lapply(files, function(f) fread(paste0('../results/LRP/', f))[,-1] ))
d
}
dat <- read_dat()
get_slope <- function(y,x) {
model <- lm(y~x)$coef[2]
model
}
across_cell_lines <- dat %>%group_by(molecular_names, DRUG) %>%
group_by(molecular_names) %>%
dplyr::mutate(maxexpr = max(abs(expression))) %>%
filter(maxexpr<10) %>% # filter genes with outliers on test set
group_by(molecular_names, DRUG) %>%
dplyr::summarize(meanabsLRP = mean(abs(LRP)), slope = cor(LRP, expression), ncells = n(), maxexpr = max(expression)) %>%
#dplyr::summarize(meanabsLRP = mean(abs(LRP)), ncells = n()) %>%
group_by(DRUG) %>%
mutate(rankl = rank((meanabsLRP))) %>%
mutate(pos = rankl/max(rankl)) %>%
mutate(percent_rank = pos * 100)
dat <- dat %>% filter(molecular_names %in% (across_cell_lines$molecular_names %>% unique()))
genes <- data.frame(gene = dat$molecular_names %>% unique())
sel_genes <-  c('ERBB2', 'EGFR', 'MDM2', 'ABCB1', 'MAP2K1','MAP2K6', 'MAP3K21', 'TUSC3')
rel_gene_names <- across_cell_lines %>%
filter(molecular_names %in% sel_genes)
#############################################
#find Cobimetinib import features
cob <- across_cell_lines %>% filter(grepl('MAP',molecular_names), DRUG == 'COBIMETINIB')
churc1 <- across_cell_lines %>% filter(grepl('CHURC', molecular_names), grepl('VIN', DRUG))
#############################################
#moa data
MOA <- fread('../data/secondary-screen-dose-response-curve-parameters.csv') %>%
select(name, moa, target) %>%
unique() %>%
mutate(DRUG = toupper(name), unique_moa = str_split_fixed(moa, ',', 2)[,1]==moa) %>%
mutate(moa = ifelse(DRUG=='DASATINIB', 'Bcr-Abl and Src kinase inhibitor', moa))
relevantometer_data <- across_cell_lines %>% filter(molecular_names %in% sel_genes) %>%
left_join(MOA)
order_by_moa <- relevantometer_data %>%
select(moa, DRUG) %>%
unique() %>%
dplyr::arrange(moa)
relevantometer_data <- relevantometer_data %>%
mutate(DRUG = factor(DRUG, levels = order_by_moa$DRUG))
across_cell_lines$molecular_names %>% unique() %>% length()
high_relevantometer_data <- relevantometer_data %>% filter(pos > 0.9)
low_relevantometer_data <- relevantometer_data %>% filter(pos <= 0.9)
#################for manuscript##################################################
read_percent_rank <- relevantometer_data %>% filter(molecular_names == 'MAP3K21')
#################################################################################
line_data <- relevantometer_data %>% cross_join(data.frame(x=c(0,1)))
relevantometer <- ggplot(relevantometer_data, aes(y = DRUG, x = pos, label = molecular_names)) +
geom_line(data = line_data, aes(y = DRUG, x= x, color=moa), linewidth=1) +
#geom_point(aes(color=molecular_names), size=3)+
geom_point(data = high_relevantometer_data, size=3, alpha = 1.0) +
geom_point(data = low_relevantometer_data, size=3) +
geom_text_repel(data = high_relevantometer_data, aes(y = DRUG, x = pos, label = molecular_names),direction = 'y', color = 'black') +
geom_text_repel(data = low_relevantometer_data, aes(y = DRUG, x = pos, label = molecular_names),direction = 'y', color = 'black') +
theme_minimal() +
theme(#panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.position = 'bottom') +
#ylab('Low importance rank     \U2194     High importance rank')  +
xlab('xAI-assigned importance rank')+
scale_y_discrete(limits=rev) +
scale_x_continuous(labels=scales::percent, limits=c(0.0,1.0)) +
coord_cartesian(xlim =c(0.0,1.0))
relevantometer
get_nth <- function(x, n=NULL) {
x <- x[order(x, decreasing=T)]
return(x[n])
}
most_important <- across_cell_lines %>%
group_by(DRUG) %>%
dplyr::mutate(cutoff = get_nth(meanabsLRP,30), scaled_LRP = meanabsLRP/max(meanabsLRP)) %>%
filter(meanabsLRP>=cutoff) %>%
mutate(rel = molecular_names %in% sel_genes) %>%
mutate(DRUG = factor(DRUG, levels = order_by_moa$DRUG))
most_important10 <- across_cell_lines %>%
group_by(DRUG) %>%
dplyr::mutate(cutoff = get_nth(meanabsLRP,10), scaled_LRP = meanabsLRP/max(meanabsLRP)) %>%
filter(meanabsLRP>=cutoff) %>%
mutate(rel = molecular_names %in% sel_genes) %>%
mutate(DRUG = factor(DRUG, levels = order_by_moa$DRUG))
most_important_only_red <- most_important %>%
filter(molecular_names %in% sel_genes)
most_important_without_red <- most_important %>%
filter(!(molecular_names %in% sel_genes))
most_important_genes_plot_rank <- ggplot(most_important, aes(x = DRUG, y = scaled_LRP, label = molecular_names)) +
#geom_line(data = line_data, aes(x = DRUG, y= x, color=moa), linewidth=1) +
geom_line(data = line_data, aes(x = DRUG, y= x, color=moa), linewidth=2, arrow = arrow(length=unit(1,"cm"), type = 'closed')) +
geom_text_repel(data = most_important_without_red, show.legend=F, size=6, color='black', max.overlaps=1000) +
geom_label_repel(data = most_important_only_red, show.legend=F, size=6, color='red', max.overlaps = 1000) +
geom_point(data=most_important_without_red, aes(x = DRUG, y = scaled_LRP),color='black', size=4.0) +
geom_point(data=most_important_only_red, aes(x = DRUG, y = scaled_LRP),color='red') +
theme_minimal() +
scale_y_continuous(trans='log10') +
theme(axis.text = element_text(size=20),
axis.title.y = element_blank(),
axis.title.x = element_text(size=30),
legend.title = element_blank(),
legend.text = element_text(size=20),
legend.position = 'bottom') +
ylab('xAI-assigned Importance') +
coord_flip() +
scale_x_discrete(limits=rev)
most_important_genes_plot_rank
png('./figures/important_genes.png', width=3000, height=1500, res=200)
relevantometer
dev.off()
png('./figures/important_genes_scaled.png', width=3200, height=4000, res=150)
most_important_genes_plot_rank
dev.off()
##########################
#groups_of_important genes across drugs
#########################
group_importance <- most_important10 %>%
left_join(MOA) %>%
#filter((moa == 'EGFR inhibitor') | (DRUG == 'IBRUTINIB')) %>%
filter(moa == 'MEK inhibitor') %>%
group_by(molecular_names) %>%
dplyr::summarize(N=n())
#############################
##################################################################################
###############
#save important genes for reactome
##############
reactome_genes <- most_important$molecular_names %>% unique()
write.csv(reactome_genes,'figures/reactome_genes.csv', row.names=F)
write.csv(most_important10$molecular_names %>% unique(),'figures/reactome_genes10.csv', row.names=F)
######
#make networks
#####
all_network_genes <- read.csv('../data/string_interactions_short.tsv',sep='\t')[,c(1,2)]
colnames(all_network_genes) <- c('V1', 'V3')
vertices_not_in_graph <- most_important10$molecular_names[!(most_important10$molecular_names %in% all_network_genes$V1) &
!(most_important10$molecular_names %in% all_network_genes$V3)] %>% unique()
most_important10 <- most_important10 %>% dplyr::select(molecular_names, meanabsLRP, DRUG, slope) %>%
group_by(DRUG) %>%
mutate(node_size = meanabsLRP/max(meanabsLRP), node_color = ifelse(slope<0, 'blue', 'red'))
g <- graph_from_data_frame(all_network_genes, directed=F)
g <- g + vertices(vertices_not_in_graph)
V(g)$name
V(g)$vertexsize <- 5
V(g)$vertexcolor = 'gray60'
E(g)$weight <- 0.01
#l <- layout_with_lgl(g)
set.seed(1)
l <- layout_nicely(g)
#l <- layout_with_fr(g)
#l <- layout_with_lgl(g)
png('./figures/networks_reactome.png', width = 3000, height=3500, res=150)
par(mfrow=c(4,3), mar=c(0,0,2,0))
for (current_drug in order_by_moa$DRUG){
current_g <- g
current_data <- most_important10 %>% filter(DRUG == current_drug)
current_genes <- current_data$molecular_names
print(length(current_genes))
node.size<-setNames(current_data$node_size, current_data$molecular_names)
node.color<-setNames(current_data$node_color, current_data$molecular_names)
for (k in names(node.size)) {
if (k %in% V(current_g)$name) {
print(V(current_g)[k]$name)
V(current_g)[k]$vertexsize <- node.size[k]**2*20
V(current_g)[k]$vertexcolor <- node.color[k]}
}
print(V(current_g)$vertexsize)
#current_network_genes <- all_network_genes %>%
#mutate(important = ifelse((V1 %in% current_genes)| (V3 %in% current_genes), 1,0))
V(current_g)$color = ifelse(V(current_g)$name %in% current_genes, 'red', 'gray60')
V(current_g)$vertexcolor[!((degree(current_g)>0) | (V(current_g)$name %in% current_genes))] <- NA
plot(current_g, vertex.size=V(current_g)$vertexsize, #ifelse(V(current_g)$name %in% current_genes,as.matrix(10), 5),
layout=l, vertex.label.cex=2.0, vertex.label.color = 'black', edge.width=0.4, edge.color = 'black',
vertex.color = adjustcolor(V(current_g)$vertexcolor,0.4), vertex.frame.color = NA,
vertex.label = ifelse(V(current_g)$name %in% current_genes, V(g)$name, NA))#,
#vertex.label = V(current_g)$name,
#main = current_drug, main.size=15)
title(current_drug, cex.main = 2.5)
}
dev.off()
######
#make networks individually
#####
#all_network_genes <- read.csv('../data/10genes.sif', sep='\t', header=F)[,c(1,3)] #%>%
#filter((V1 %in% most_important10$molecular_names) | (V3 %in% most_important10$molecular_names))
most_important10 <- most_important10 %>% dplyr::select(molecular_names, meanabsLRP, DRUG, slope) %>%
group_by(DRUG) %>%
mutate(node_size = meanabsLRP/max(meanabsLRP), node_color = ifelse(slope<0, 'blue', 'red'))
#png('./figures/networks_reactome.png', width = 3000, height=3500, res=150)
par(mfrow=c(4,4), mar=c(0,0,1,0))
for (current_drug in order_by_moa$DRUG){
current_data <- most_important10 %>% filter(DRUG == current_drug)
current_genes <- current_data$molecular_names
temp <- all_network_genes %>%
filter((V1 %in% current_genes) | (V3 %in% current_genes))
current_genes_plus_linker <- c(temp$V1, temp$V3) %>% unique()
current_network <- all_network_genes %>%
filter((V1 %in% current_genes_plus_linker) | (V3 %in% current_genes_plus_linker))
vertices_not_in_graph <- current_data$molecular_names[!(current_data$molecular_names %in% current_network$V1) &
!(current_data$molecular_names %in% current_network$V3)] %>% unique()
g <- graph_from_data_frame(current_network, directed=F)
g <- g + vertices(vertices_not_in_graph)
V(g)$vertexsize <- 5
V(g)$vertexcolor = 'gray60'
E(g)$weight <- 0.1
#l <- layout_with_lgl(g)
l <- layout_nicely(g)
print(length(current_genes))
node.size<-setNames(current_data$node_size, current_data$molecular_names)
node.color<-setNames(current_data$node_color, current_data$molecular_names)
for (k in names(node.size)) {
if (k %in% V(g)$name) {
print(V(g)[k]$name)
V(g)[k]$vertexsize <- node.size[k]**2*20
V(g)[k]$vertexcolor <- node.color[k]}
}
print(V(g)$vertexsize)
#V(current_g)$color = ifelse(V(current_g)$name %in% current_genes, 'red', 'gray60')
#V(current_g)$color[!((degree(current_g)>0) | (V(current_g)$name %in% current_genes))] <- NA
plot(g, vertex.size=V(g)$vertexsize, #ifelse(V(current_g)$name %in% current_genes,as.matrix(10), 5),
layout=l, vertex.label.cex=1.0, vertex.label.color = 'black', edge.width=0.4, edge.color = 'black',
vertex.color = adjustcolor(V(g)$vertexcolor,0.6), vertex.frame.color = NA,
vertex.label = ifelse(V(g)$name %in% current_genes, V(g)$name, NA),
#vertex.label = V(current_g)$name,
main = current_drug)
}
dev.off()
#find similar genes within moa
###########
most_important_plus_moa <- most_important10 %>% left_join(MOA)
ggplot(most_important_plus_moa, aes(y= 0, x = scaled_LRP, color = moa, label=DRUG)) + #geom_boxplot()
geom_point() +
geom_text_repel() +
theme_classic() +
facet_wrap(~molecular_names)
#########
# see relationship between expression and LRP
##########
#only selected genes
rel_gene_names_here <- rel_gene_names %>% filter(molecular_names!= 'MAP2K1')
selected_genes_dynamics <- dat %>% filter(molecular_names %in% rel_gene_names_here$molecular_names)
last_name <- selected_genes_dynamics %>% group_by(DRUG, molecular_names) %>%
dplyr::mutate(smooth = loess(LRP~expression)$fitted) %>%
filter(expression == max(expression))
most_important_genes_dynamics <- dat %>% filter(molecular_names %in% most_important$molecular_names)
resistance <- data.frame('resistance' = c('higher resistance', 'higher_sensitivity'), y = c(1,-1))
arrows <- selected_genes_dynamics %>%
group_by(molecular_names, DRUG) %>%
dplyr::summarize(x_coord = min(expression)-1, DRUG=first(DRUG)) %>%
dplyr::select(x_coord, molecular_names, DRUG) %>%
unique() %>%
cross_join(resistance)
dynamics_selected_genes <- ggplot(selected_genes_dynamics, aes(x = expression, y = LRP, color=DRUG)) +
geom_point(size=0.1) +
geom_smooth(se=F, linewidth=0.4) +
geom_text_repel(data = last_name, aes(x = expression, y =smooth, label = DRUG), size=4, color = 'black', hjust= -0.5, direction = 'y') +
facet_wrap(~molecular_names, scales='free', ncol=2, dir='v') +
theme_classic() +
guides(color = guide_legend(override.aes = list(size = 5))) +
xlab('Gene expression') +
ylab('LRP contribution') +
xlim(c(-2,6)) +
theme(strip.text = element_text(size=15),
axis.text = element_text(size=12),
axis.title = element_text(size=20),
legend.text = element_text(size=13),
legend.title = element_blank(),
legend.position = 'bottom')
dynamics_selected_genes
png('./figures/dynamics_of_LRPcontribution.png', width=4000, height=4500, res=300)
dynamics_selected_genes
dev.off()
