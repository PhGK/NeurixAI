# Adapted from https://github.com/theislab/moscot/blob/main/pyproject.toml

[build-system]
requires = ["setuptools>=61", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "druxai"
dynamic = ["version"]
description = "Cell Line Drug Compound Analysis"
readme = "README.md"
requires-python = ">=3.9"
# do only when project is public license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 0 - Alpha",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Typing :: Typed",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10"
]
keywords = [
    "cell-line",
    "compounds"
]
authors = [
    {name = "P K"},
    {name = "N K"}
]
maintainers = [
    {name = "Niklas Kiermeyer"}
]


dependencies = [
    "numpy>=1.26.0",
    "pandas>=2.1.4",
    "matplotlib>=3.8.0",
    "torch>=2.2.1",
    "scikit-learn>=1.3.0",
    "rich>=13.7.1",
    "wandb>=0.16.4",
    "torchmetrics>=1.3.2",
    "tqdm>=4.65",
    "torch-geometric>=2.5.2",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=3.0.0",
    "tox>=4",
]
test = [
    "pytest>=7",
    "pytest-xdist>=3",
    "pytest-mock>=3.5.0",
    "pytest-cov>=4",
    "coverage[toml]>=7",
]
# Automatic HTML documentation which might be useful for later (e.g. sphinx)
# docs = []

# [project.urls]
# Homepage =
# Documentation =
# "Source Code" =

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = true

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist"
]
# to ignore warnings paste them in here:
# ignore = []
line-length = 120
lint.select = [
    "D", # flake8-docstrings
    # "I", # isort
    "E", # pycodestyle
    "F", # pyflakes
    "W", # pycodestyle
    "Q", # flake8-quotes
    "SIM", # flake8-simplify
    "NPY",  # NumPy-specific rules
    "PT",  # flake8-pytest-style
    "TID",  # flake8-tidy-imports
    "B", # flake8-bugbear
    "UP", # pyupgrade
    "C4", # flake8-comprehensions
    "BLE", # flake8-blind-except
    "T20",  # flake8-print
    "RET", # flake8-raise
]
lint.unfixable = ["B", "UP", "C4", "BLE", "T20", "RET"]
target-version = "py38"
[tool.ruff.lint.per-file-ignores]
"notebooks/*.ipynb" = ["D", "T201", "C416"]
"*/__init__.py" = ["F401"]
"docs/*" = ["D"]
[tool.ruff.lint.pydocstyle]
convention = "numpy"
[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'

[tool.isort]
profile = "black"
include_trailing_comma = true
multi_line_output = 3
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "GENERIC", "NUMERIC", "PLOTTING", "BIO", "FIRSTPARTY", "LOCALFOLDER"]
# also contains what we import in notebooks
known_generic = ["wrapt", "joblib"]
known_numeric = ["numpy", "pandas", "sklearn", "networkx", "statsmodels"]
known_plotting = ["IPython", "matplotlib", "mpl_toolkits", "seaborn"]

[tool.pytest.ini_options]
markers = ["fast: marks tests as fask"]
xfail_strict = true
filterwarnings = [
    "ignore:No data for colormapping:UserWarning"
]

[tool.coverage.run]
branch = true
parallel = true
source = ["src/"]
omit = [
    "*/__init__.py",
    "*/_version.py",
]

[tool.coverage.report]
exclude_lines = [
    '\#.*pragma:\s*no.?cover',
    "^if __name__ == .__main__.:$",
    '^\s*raise AssertionError\b',
    '^\s*raise NotImplementedError\b',
    '^\s*return NotImplemented\b',
]
precision = 2
show_missing = true
skip_empty = true
sort = "Miss"

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
python_version = "3.9"
plugins = "numpy.typing.mypy_plugin"

ignore_errors = false

warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

disallow_untyped_calls = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_any_generics = true

strict_optional = true
strict_equality = true
warn_return_any = false
warn_unreachable = false
check_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
no_warn_no_return = true

show_error_codes = true
show_column_numbers = true
error_summary = true
ignore_missing_imports = true

disable_error_code = ["assignment", "comparison-overlap", "no-untyped-def", "override"]

[tool.doc8]
max_line_length = 120

[tool.tox]
legacy_tox_ini = """
[tox]
min_version = 4.0
env_list = lint-code,py{3.9,3.10,3.11}
skip_missing_interpreters = true

[testenv]
extras = test
allowlist_externals = python
pass_env = PYTEST_*,CI
commands = python -m pytest

[testenv:lint-code]
description = Lint the code.
deps = pre-commit>=3.0.0
skip_install = true
commands =
    pre-commit run --all-files --show-diff-on-failure

[testenv:build-package]
description = Build the package.
deps =
    build
allowlist_externals = rm
commands =
    rm -rf {tox_root}{/}dist
    python -m build --sdist --wheel --outdir {tox_root}{/}dist{/} {posargs:}
commands_post =
    python -c 'import pathlib; print(f"Package is under:", pathlib.Path("{tox_root}") / "dist")'
"""
